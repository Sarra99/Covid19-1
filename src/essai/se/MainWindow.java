/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package essai.se;


import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Algo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        NbCadres = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Quitter = new javax.swing.JButton();
        Demarr = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListP = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        inputP1 = new javax.swing.JTextField();
        LabDef = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Lab = new javax.swing.JLabel();
        Deff = new javax.swing.JLabel();
        Lab1 = new javax.swing.JLabel();
        Defff = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestion de la mémoire | Remplacement des pages");
        setBackground(new java.awt.Color(255, 153, 153));
        setForeground(new java.awt.Color(255, 153, 153));

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));
        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel1.setForeground(new java.awt.Color(255, 255, 204));
        jPanel1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        jLabel2.setFont(new java.awt.Font("Sylfaen", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Algorithme de remplacement de pages ?");

        Algo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FIFO", "Optimal", "LRU" }));
        Algo.setEditor(null);
        Algo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlgoActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Sylfaen", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Nombre de cadres ?");

        NbCadres.setBackground(new java.awt.Color(204, 204, 255));
        NbCadres.setText("0");
        NbCadres.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        NbCadres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NbCadresActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Sylfaen", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("La chaîne des références des pages :");

        Quitter.setBackground(new java.awt.Color(204, 204, 255));
        Quitter.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Quitter.setForeground(new java.awt.Color(0, 51, 153));
        Quitter.setText("Quitter");
        Quitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitterActionPerformed(evt);
            }
        });

        Demarr.setBackground(new java.awt.Color(204, 204, 255));
        Demarr.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Demarr.setForeground(new java.awt.Color(0, 51, 153));
        Demarr.setText("Démarrer");
        Demarr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DemarrActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Sylfaen", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Saisir une page");

        add.setBackground(new java.awt.Color(204, 204, 255));
        add.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        add.setText("+");
        add.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(ListP);

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTable);

        inputP1.setBackground(new java.awt.Color(204, 204, 255));
        inputP1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        inputP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputP1ActionPerformed(evt);
            }
        });

        LabDef.setBackground(new java.awt.Color(255, 255, 153));
        LabDef.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        LabDef.setForeground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 51, 51));

        jLabel1.setBackground(new java.awt.Color(255, 102, 153));
        jLabel1.setFont(new java.awt.Font("UVN Banh Mi", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Application de remplacement de pages");

        jLabel6.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\ordinateur-image-animee-0019.gif")); // NOI18N
        jLabel6.setText("jLabel6");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Lab.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        Lab.setForeground(new java.awt.Color(255, 255, 255));

        Deff.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        Deff.setForeground(new java.awt.Color(255, 255, 255));

        Lab1.setFont(new java.awt.Font("Sylfaen", 1, 16)); // NOI18N
        Lab1.setForeground(new java.awt.Color(255, 255, 255));

        Defff.setFont(new java.awt.Font("Sylfaen", 1, 16)); // NOI18N
        Defff.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(235, 235, 235)
                        .addComponent(Demarr)
                        .addGap(18, 18, 18)
                        .addComponent(Quitter, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(258, 258, 258)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabDef, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(Lab)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Deff, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addGap(10, 10, 10)
                                                .addComponent(inputP1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel3))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(NbCadres, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel4))
                                .addGap(19, 19, 19)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Algo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(Lab1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Defff)
                        .addGap(92, 92, 92))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(57, 57, 57)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel5)
                                            .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(inputP1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(37, 37, 37)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(NbCadres, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3)))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Defff)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Lab1)
                                .addComponent(jLabel2)
                                .addComponent(Algo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 19, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Demarr, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Quitter, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(374, 374, 374)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Lab)
                                    .addComponent(Deff)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(404, 404, 404)
                                .addComponent(LabDef)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        Quitter.getAccessibleContext().setAccessibleName("Démarrer");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputP1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputP1ActionPerformed
DefaultListModel model = new DefaultListModel();
int reff[]= new int[20];
int w=0;
   
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
      {                                    
        String Page;
        Page = inputP1.getText();
        int val = Integer.parseInt(inputP1.getText());
        reff[w]=val;
        w++;
        model.addElement(Page);
        ListP.setModel(model);
        inputP1.setText("");
      }
    }//GEN-LAST:event_addActionPerformed

    private void DemarrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DemarrActionPerformed
        String Choix = Algo.getSelectedItem().toString();
    int i,j;
    int NbC=Integer.parseInt(NbCadres.getText());
    int NbP = ListP.getModel().getSize();
    int DefP=0 ;
    boolean test=false;
   ArrayList<String> Pages = new ArrayList<String>() ;
   for (i=0;i<NbP;i++)
   {Pages.add(i,ListP.getModel().getElementAt(i));}
     DefaultTableModel model=new DefaultTableModel();
     for (int k=0;k<NbC;k++)
     { model.addColumn("");}
     model.addColumn("");

      if (Choix=="FIFO")
        {
             int frames, pointer = 0, hit = 0, fault = 0;
             boolean DD =true;
             int buffer[];
             int buffer2[];
             buffer = new int[NbC];
             buffer2 = new int[NbC];
             for( j = 0; j < NbC; j++)
             {buffer[j] = -1;}
        for( i = 0; i < NbP; i++)
        {
         int search = -1;
         for( j = 0; j < NbC; j++)
         {
          if(buffer[j] == reff[i])
          {
           search = j;
           hit++;
           break;
          } 
         }
         if(search == -1)
         {
          buffer[pointer] = reff[i];
          fault++;
          pointer++;
          if(pointer == NbC)
           pointer = 0;
         }
         if(i!=0)
         {
           
             if(!java.util.Arrays.equals(buffer,buffer2))
               {DD=false;}
             else{DD=true;}
          
         }
          Vector<String> row=new Vector<>();
                for (int k=0;k<NbC;k++)
                { row.addElement(String.valueOf(buffer[k]));}
                if((DD == false)||(i==0))
                {row.addElement("D"); }
                else{row.addElement("-");}
                model.addRow(row); 
                 System.arraycopy(buffer, 0, buffer2, 0, NbC);
                
        }
          jTable.setModel(model);
        Defff.setText(String.valueOf(fault));     
        }

        if (Choix=="LRU")
    {
       
        int pointer = 0;
        int fault = 0;
        Boolean isFull = false;
        boolean DD = false;
        int mem[];
        int mem2[];
        mem = new int[NbC];
        mem2 = new int[NbC];
        ArrayList<Integer> stack = new ArrayList<Integer>();
        for( j = 0; j < NbC; j++)
        {mem[j] = -1;}
        for( i = 0; i <NbP; i++)
        {
            if(stack.contains(reff[i]))
            { stack.remove(stack.indexOf(reff[i]));
            }
            stack.add(reff[i]);
            int search = -1;
            for( j = 0; j < NbC; j++)
            {
                if(mem[j] == reff[i])
                {
                    search = j;
                    break;
                }
            }
            if(search == -1)
            {
                if(isFull){
                    int min_loc = NbP;
                    for( j = 0; j < NbC; j++)
                    {     
                        if(stack.contains(mem[j])){ 
                            int temp = stack.indexOf(mem[j]);
                            if(temp < min_loc){

                                min_loc = temp;
                                pointer = j;
                            }
                        }
                    }
                }
                mem[pointer] = reff[i];
                fault++;
                pointer++;
                if(pointer == NbC){
                    pointer = 0;
                    isFull = true;
                }
                
            }
            if(i!=0)
         {
           
             if(!java.util.Arrays.equals(mem,mem2))
               {DD=false;}
             else{DD=true;}
          
         }
            Vector<String> row=new Vector<>();
                for (int k=0;k<NbC;k++)
                { row.addElement(String.valueOf(mem[k]));}
                if((DD == false)||(i==0))
                {row.addElement("D"); }
                else{row.addElement("-");}
                model.addRow(row); 
                 System.arraycopy(mem, 0, mem2, 0, NbC);
        }
        jTable.setModel(model);
        Defff.setText(String.valueOf(fault));
   
    }

if (Choix=="Optimal")
        {
           boolean DD = false;
            int pointer = 0;
            int numFault = 0;
            boolean isFull = false;
            int buffer[];
            int buffer2[];
            buffer = new int[NbC];   
            buffer2 = new int[NbC];
            boolean hit[];
            int fault[];
            
            
        hit = new boolean[NbP];
        fault = new int[NbP];
        for( j = 0; j < NbC; j++)
        {buffer[j] = -1;}
        
      for(i = 0; i < NbP; i++)
        {
            int search = -1;
            for( j = 0; j < NbC; j++)
            {
                if(buffer[j] == reff[i])
                {
                    search = j;
                    hit[i] = true;
                    fault[i] = numFault;
                    break;
                }
            }

            if(search == -1)
            {
                if(isFull)
                {
                    int index[] = new int[NbC];
                    boolean index_flag[] = new boolean[NbC];
                    for(int x = i + 1; x < NbP; x++)
                    {
                        for(int k = 0; k < NbC; k++)
                        {
                            if((reff[x] == buffer[k]) && (index_flag[k] == false))
                            {
                                index[k] = x;
                                index_flag[k] = true;
                                break;
                            }
                        }
                    }
                    int max = index[0];
                    pointer = 0;
                    if(max == 0)
                    {
                        max = 200;
                    }

                    for(int a = 0; a < NbC; a++)
                    {
                        if(index[a] == 0)
                        {
                            index[a] = 200;
                        }

                        if(index[a] > max)
                        {
                            max = index[a];
                            pointer = a;
                        }
                    }
                }
                buffer[pointer] = reff[i];
                numFault++;
                DD=true;
                fault[i] = numFault;
                if(!isFull)
                {
                    pointer++;
                    if(pointer == NbC)
                    {
                        pointer = 0;
                        isFull = true;
                    }
                }
            }
           if(i!=0)
         {
           
             if(!java.util.Arrays.equals(buffer,buffer2))
               {DD=false;}
             else{DD=true;}
          
         }
           Vector<String> row=new Vector<>();
                for (int k=0;k<NbC;k++)
                { row.addElement(String.valueOf(buffer[k]));}
                if((DD == false)||(i==0))
                {row.addElement("D"); }
                else{row.addElement("-");}
                model.addRow(row); 
                 System.arraycopy(buffer, 0, buffer2, 0, NbC);
        }
        jTable.setModel(model);
        Defff.setText(String.valueOf(numFault));
    }
    Lab1.setText("Nombre de défauts de pages :");
    }//GEN-LAST:event_DemarrActionPerformed

    private void QuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitterActionPerformed
        this.dispose();
    }//GEN-LAST:event_QuitterActionPerformed

    private void NbCadresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NbCadresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NbCadresActionPerformed

    private void AlgoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlgoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AlgoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Algo;
    private javax.swing.JLabel Deff;
    private javax.swing.JLabel Defff;
    private javax.swing.JButton Demarr;
    private javax.swing.JLabel Lab;
    private javax.swing.JLabel Lab1;
    private javax.swing.JLabel LabDef;
    private javax.swing.JList<String> ListP;
    private javax.swing.JTextField NbCadres;
    private javax.swing.JButton Quitter;
    private javax.swing.JButton add;
    private javax.swing.JTextField inputP1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
